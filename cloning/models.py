'''This package sets the data storage parameters for the models app.

It is dependent on the data package models for Sequencing and Protocol.
There is also a dependency to the reagents package for :class:`~reagents.models.Construct` and :class:`~reagents.models.Primer` objects and from the external package a Contact.
'''

from django.db import models

CLONING_TYPE = (
	('PCR', 'PCR Based'),
	('digest', 'Digestion and Ligation'),
	('LIC', 'Ligation Independent Cloning'),
)

class Cloning(models.Model):
    """This model stores details about the generation of new recombinant DNA molecules.

    This is for :class:`~reagents.models.Construct` which are cloned or subcloned from an existing library or construct, generating a new construct.
    This might involve adding a new epitope flag or generating a new deletion or insertion.
    Typically these clones are generated by PCR or restriction digestion so the details include how this occurred.
    
    The required fields for this object are the construct and the cloning_type.
    """

    date_completed = models.DateField(blank=True, null=True)
    construct = models.ForeignKey('reagents.Construct', help_text="Result of Cloning Project", related_name="final_clone")
    cloning_type = models.CharField(max_length=25, choices=CLONING_TYPE)
    vector = models.ForeignKey('reagents.Construct', blank=True, null=True, related_name="recipient_vector")
    vector_CIP = models.BooleanField()
    insert = models.CharField(max_length=100, blank=True, null=True)
    primer_5prime = models.ForeignKey('reagents.Primer', blank=True, null=True, related_name='5_Primer', verbose_name="5' PCR Primer")
    primer_3prime = models.ForeignKey('reagents.Primer', blank=True, null=True, related_name='3_Primer', verbose_name="3' PCR Primer")
    restriction_enzyme_5prime = models.CharField(max_length=7, blank=True, null=True, verbose_name="insert 5' site")
    restriction_enzyme_3prime = models.CharField(max_length=7, blank=True, null=True, verbose_name="vector 3' site")    
    vector_restriction_enzyme_5prime = models.CharField(max_length=7, blank=True, null=True, verbose_name="vector 5' site")
    vector_restriction_enzyme_3prime = models.CharField(max_length=7, blank=True, null=True, verbose_name="vector 3' site")    
    destroyed_5prime = models.BooleanField(verbose_name="is the 5' site destroyed?")
    destroyed_3prime = models.BooleanField(verbose_name="is the 3' site destroyed?")    
    ligation_temperature = models.IntegerField(blank=True, null=True, help_text = "in degrees Celsius")
    ligation_time = models.TimeField(blank=True, null=True, help_text = "HH:MM")
    gel = models.ImageField(upload_to = 'cloning/%Y/%m/%d', blank=True, null=True)
    sequencing = models.ManyToManyField('data.Sequencing', blank=True, null=True)
    researcher = models.ManyToManyField('external.Contact', blank=True, null=True)
    notes = models.TextField(max_length=250, blank=True, null=True)

    def __unicode__(self):
        '''The unicode representation for a Cloning object is the construct name (from the Construct object) followed by the word cloning.'''
        return u'%s cloning' % self.construct

    @models.permalink
    def get_absolute_url(self):
        '''The permalink for a cloning object is the primary key linked to **/clones/cloning/<ID>**'''
        return ('cloning-detail', [str(self.id)])

class Mutagenesis(models.Model):
    """This model contains data describing the generation of muationns in clones.
    
    This model is for changing a :class:~`reagents.models.Construct` by mutation.
    The mutation is done by either site directed mutagenesis or small deletions or insertions.
    Typically a mutagenesis involves a PCR mediated alteration in a construct sequence generating a new construct.
    The details then generally include the :class:~`reagents.models.Primer`  objects used for the PCR.
    
    The required fields are construct, mutation, template and method."""
    construct = models.ForeignKey('reagents.Construct', related_name="mutant", help_text="Finished Construct")
    mutation = models.CharField(max_length=25)
    template = models.ForeignKey('reagents.Construct', related_name="template", help_text="Initial Template Construct")
    date_completed = models.DateField(blank=True, null=True)
    method = models.CharField(max_length=50, default = "Stratagene QuickChange")
    protocol = models.ForeignKey('data.Protocol', blank=True, null=True)
    sense_primer = models.ForeignKey('reagents.Primer', blank=True, null=True, related_name="sense_primer")
    antisense_primer = models.ForeignKey('reagents.Primer', blank=True, null=True, related_name="antisense_primer")
    colonies = models.IntegerField(blank=True, null=True)
    sequencing = models.ManyToManyField('data.Sequencing', blank=True, null=True)
    researcher = models.ManyToManyField('external.Contact', blank=True, null=True)
    notes = models.TextField(max_length=250, blank=True, null=True)

    class Meta:
        verbose_name_plural = "Mutageneses"

    def __unicode__(self):
        '''The unicode name for a mutagenesis is the final construct with the word mutageneis.'''
        return u'%s mutagenesis' % self.construct

    @models.permalink
    def get_absolute_url(self):
        '''The permalink for a mutagenesis object is the primary key linked to **/clones/mutagenesis/<ID>**'''
        return ('mutagenesis-detail', [str(self.id)])
